<?xml version="1.0" encoding="UTF-8"?>
<!-- camel-k: language=xml -->

<routes xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://camel.apache.org/schema/spring"
        xsi:schemaLocation="
            http://camel.apache.org/schema/spring
            https://camel.apache.org/schema/spring/camel-spring.xsd">



    <route id="server">
        <from uri="servlet:/zip?disableStreamCache=true"/>

        <log message="got ZIP from edge: ${header.edgeId}"/>
<!-- <setProperty name="edge-id">
    <simple>${header.edge-id}</simple>
</setProperty>
 -->
<!-- <stop/> -->
        <to uri="direct:check-pending-work"/>

        <log message="handling input stream"/>

        <removeHeaders pattern="*"/>

        <!-- Unzip -->
        <unmarshal>
            <zipFile usingIterator="true"/>
        </unmarshal>

        <split streaming="true" parallelProcessing="false">
            <simple>${body}</simple>
            <bean ref="controller" method="jobPending"/>
            <to uri="file:unzipped"/>
            <!-- <log message="unzipping item"/> -->
        </split>

        <log message="done streaming"/>

        <!-- When ZIP is fully uncompressed we move files for processing -->
        <!-- WARNING: Camel 'exec' is very tricky, rsync was easiest to move files -->
        <to uri="exec:rsync?useStderrOnEmptyStdout=true&amp;args=-axuv --prune-empty-dirs --remove-source-files  unzipped/ tempfiles"/>

        <setBody>
            <simple>done</simple>
        </setBody>
    </route>


    <route id="file-reader" autoStartup="false">
        <from uri="file:tempfiles?delete=true&amp;recursive=true"/>
        <!-- <log message="file is: ${header.CamelFileName}"/> -->

        <choice>
            <when>
                <simple>${header.CamelFileName} regex "images/.*/.*\.(jpg|jpeg|JPG|JPEG)"</simple>

                <!-- <log message="valid: ${header.CamelFileName}"/> -->
                <to uri="direct:store-image-s3"/>

            </when>
            <otherwise>
                <log message="(only /images/class-x/*.jpg) IGNORED: ${header.CamelFileName}"/>
            </otherwise>
        </choice>

        <!-- RESET BODY and CHECK ASYNC (wireTap) -->
        <setBody>
            <constant>trigger</constant>
        </setBody>
        <bean ref="controller" method="jobDone"/>
    </route>


    <route id="store-image-s3">
        <from uri="direct:store-image-s3"/>

        <setHeader name="CamelAwsS3Key">
            <simple>${header.CamelFileName}</simple>
        </setHeader>

        <setHeader name="CamelAwsS3ContentType">
            <simple>image/jpeg</simple>
        </setHeader>

<!-- <log message="storing into S3: ${bean:controller?method=getEdgeId} / ${header.CamelAwsS3Key}"/> -->

<!-- <to uri="aws2-s3:{{edge.id}}-data"/> -->
<toD uri="aws2-s3:${bean:controller?method=getEdgeId}-data"/>

<setBody>
    <simple>{"name":"zipfile"}</simple>
</setBody>
<!-- <to uri="kafka:{{edge.id}}"/> -->
<toD uri="kafka:${bean:controller?method=getEdgeId}"/>
        <!-- <log message="file stored: ${header.CamelAwsS3Key}"/> -->
    </route>


    <route id="startup-check">
        <from uri="timer:startup-check?repeatCount=1"/>

        <to uri="exec:find?args= tempfiles -type f"/>

        <choice>
            <when>
                <simple>${body} == ''</simple>
                <bean ref="controller" method="init(0)"/>
            </when>
            <otherwise>
                <split>
                    <tokenize token="\n"/>
                    <!-- <to uri="log:debug?showAll=true"/> -->
                    <when>
                        <simple>${header.CamelSplitComplete} == true</simple>
                        <bean ref="controller" method="init(${header.CamelSplitSize})"/>
                    </when>
                </split>
            </otherwise>
        </choice>
        
        <bean ref="controller" method="test"/>
        <to uri="controlbus:route?routeId=file-reader&amp;action=start"/>
    </route>


    <route id="check-pending-work">
        <from uri="direct:check-pending-work"/>
        <!-- <choice> -->
            <when>
                <method ref="controller" method="isBusy(${header.edgeId})"/>
                <log message="busy: ignoring ZIP request"/>
                <setHeader name="CamelHttpResponseCode">
                    <constant>425</constant>
                </setHeader>
                <setBody>
                    <constant>{"status":"busy"}</constant>
                </setBody>
                <stop/>
            </when>
<!--             <otherwise>
                <bean ref="controller" method="setEdgeId(${header.edgeId})"/>
            </otherwise>
        </choice> -->
    </route>


    <route id="trigger-pipeline">
        <from uri="direct:trigger-pipeline"/>
        <setBody>
            <!-- <simple>{{edge.id}}</simple> -->
            <simple>${bean:controller?method=getEdgeId}</simple>
        </setBody>
        <log message="sending event: ${body}"/>
<to uri="kafka:trigger"/>
<wireTap uri="direct:notify-monitor"/>
    </route>


    <route id="notify-monitor">
        <from uri="direct:notify-monitor"/>

        <!-- <toD uri="{{ds:aws2-s3}}:{{edge.id}}-data?operation=listObjects"/> -->
        <toD uri="{{ds:aws2-s3}}:${bean:controller?method=getEdgeId}-data?operation=listObjects"/>

        <log message="size of collection: ${body.size}"/>

        <setBody>
            <simple>{"name":"pipeline", "files":"${body.size}"}</simple>
        </setBody>
        <!-- <to uri="kafka:{{edge.id}}"/> -->
        <toD uri="kafka:${bean:controller?method=getEdgeId}"/>

    </route>

</routes>
